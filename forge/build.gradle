buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
        maven { url 'https://jitpack.io' }

    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
     }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

group = 'net.mooosik'
version = '0.1'
archivesBaseName = 'minerino'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20210309-1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=minerino.mixins.json"

            mods {
                minerino {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=minerino.mixins.json"

            mods {
                minerino {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'minerino', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                minerino {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "minerino.refmap.json"
}

configurations {
    shade
}


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.31'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    annotationProcessor 'org.spongepowered:mixin:0.8:processor'

    implementation("com.github.twitch4j:twitch4j:1.2.1")


    shade 'com.github.twitch4j:twitch4j:1.2.1'

    compile 'com.github.twitch4j:twitch4j-chat:1.2.1'
    compile 'com.github.twitch4j:twitch4j-auth:1.2.1'
    compile 'com.github.twitch4j:twitch4j-common:1.2.1'
    compile 'com.github.twitch4j:twitch4j-eventsub-common:1.2.1'
    compile 'com.github.twitch4j:twitch4j-extensions:1.2.1'
    compile 'com.github.twitch4j:twitch4j-graphql:1.2.1'
    compile 'com.github.twitch4j:twitch4j-helix:1.2.1'
    compile 'com.github.twitch4j:twitch4j-kraken:1.2.1'
    compile 'com.github.twitch4j:twitch4j-messaginginterface:1.2.1'
    compile 'com.github.twitch4j:twitch4j-pubsub:1.2.1'

    compile 'com.github.philippheuer.credentialmanager:credentialmanager:0.1.2'
    compile'com.github.philippheuer.events4j:events4j-api:0.9.5'
    compile'com.github.philippheuer.events4j:events4j-core:0.9.5'
    compile'com.github.philippheuer.events4j:events4j-handler-simple:0.9.5'

    compile 'com.github.vladimir-bukhtoyarov:bucket4j-core:4.7.0'

    compile 'io.github.openfeign:feign-core:11.1'
    compile 'io.github.openfeign:feign-hystrix:11.1'
    compile 'io.github.openfeign:feign-jackson:11.1'
    compile 'io.github.openfeign:feign-okhttp:11.1'
    compile 'io.github.openfeign:feign-slf4j:11.1'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.12.3'
    compile 'com.fasterxml.jackson.core:jackson-core:2.12.3'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.3'
    compile 'com.squareup.okhttp3:okhttp:4.9.1'
    compile 'com.squareup.okio:okio:2.9.0'
    compile 'org.jetbrains.kotlin:kotlin-stdlib:1.4.10'
    compile 'org.jetbrains.kotlin:kotlin-stdlib-common:1.4.10'
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.4.10'
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.10'
    compile 'io.micrometer:micrometer-core:1.3.2'
    compile 'com.neovisionaries:nv-websocket-client:2.14'
    compile 'com.github.ben-manes.caffeine:caffeine:2.9.0'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.13'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.13'
}


shadowJar {
    configurations = [project.configurations.shade]
    relocate 'com.github.twitch4j.twitch4j', 'net.mooosik.minerino.twitch4j'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "minerino",
                "Specification-Vendor"    : "M0oosik",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "M0oosik",
                "MixinConfigs"            : "minerino.mixins.json",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

reobf {
    shadowJar{}
}

jar.finalizedBy('reobfJar')
